/** @file ipc.h
@author Roger Bongers
@date May 27 2015
@brief IPC common operations and values.
@details Functions and values for processing ipc_t.
@see sem.h shm.h
**/
#include <stdlib.h>
#include <sys/ipc.h>

#include <err.h>
#include <str.h>
#include <file.h>

/* ------------------------- START OF GUARD BLOCK ------------------------- */
#ifndef MM_IPC
#define MM_IPC
/**
@brief The flags used to define the permissions of a new IPC struct.
@details IPC_CREAT and IPC_EXCL are often used as IPC flags, but here they are
disabled by many functions that use an ipc_t and re-enabled when necessary.
@see ipc_t
**/
enum IPC_FLAGS {
    IPC_USR_R = 0400,
    IPC_USR_W = 0200,
    IPC_GRP_R =  040,
    IPC_GRP_W =  020,
    IPC_OTH_R =   04,
    IPC_OTH_W =   02,
};

/**
@brief Contains information for creating IPC struct.
@see shm_t sem_t
**/
typedef struct
{
    int   flags;
    //!< The permissions of the IPC struct.
    int   proj_id;
    //!< A semi unique program value used to generate keys.
    char* path;
    //!< The path of a file used to generate keys.
    key_t key;
    //!< A shared key between programs generated by agreed values.
} ipc_t;

/**
@brief The function to use to generate keys. ipc_gen_key_ftok() by default.
@param _path The name of the file to generate the key from.
@param _proj_id An agreed upon value used to generate a unique key.
@return Upon success, returns the key.
<br>Upon failure, returns -1, prints errors if necessary, and sets #err_num.
@beg{Errors}
@ent{_EPTRNULL, \b _path was NULL.}
@ent{_ESTREMPTY, \b _path begins with a '\0' character.}
@ent{_ESYSTEM, Error producing the key.}
@end
**/
extern key_t (*ipc_gen_key) (char* _path, int _proj_id);
#endif
/* -------------------------- END OF GUARD BLOCK -------------------------- */


/**
@brief Allocates a new ipc_t and sets all its values to 0 or NULL.
@return Upon success, returns a pointer to the new ipc_t.
<br>Upon failure, returns NULL, prints errors if necessary, and sets #err_num.
@beg{Errors}
@ent{_EALLOC, Unable to allocate memory for the struct.}
@end
**/
ipc_t* ipc_t_new (void);
/**
@brief Sets values of an ipc_t.
@warning If the \b path is not set, the program will fail at ipc_gen_key().
@param _ipc Refers to the struct to set.
If \b *_ipc is NULL, it is created by ipc_t_new().
@param _flags If \b _flags is 0, the struct's \b flags are set to #ipc_flags.
If \b _flags is 1 or more, the struct's \b flags are set to \b _flags.
Otherwise, the struct's \b flags are not set.
@param _proj_id
If \b _proj_id is 0, the struct's \b proj_id is set to #ipc_proj_id.
If \b _proj_id is 1 or more, the struct's \b proj_id is set to \b _proj_id.
Otherwise, the struct's project ID is not set.
@param _path If \b _path is not NULL, the struct's \b path is set to \b _path.
Otherwise, the struct's \b path is not set.
@param _key If \b _key is 0, the struct's \b key is created with ipc_gen_key().
If \b _key is 1 or more, the struct's \b key is set to \b _key.
Otherwise, the struct's \b key is not set.
@return Upon success, returns 0.
<br>Upon failure, returns -1, prints errors if necessary, and sets #err_num.
@beg{Errors}
@ent{_EPTRNULL, _ipc is NULL.}
@end
@note Inherits errors from ipc_t_new(), ipc_gen_key().
**/
int ipc_t_set
(ipc_t** _ipc, int _flags, int _proj_id, char* _path, key_t _key);
/**
@brief Sets values of an ipc_t given a root and a subscription.
@param _root,_sub Parameters to pass to ipc_gen_path.
@return Upon success, returns 0.
<br>Upon failure, returns -1, prints errors if necessary, and sets #err_num.
@note Inherits errors from ipc_gen_path() and ipc_t_set().
@see ipc_gen_path() ipc_t_set()
**/
int ipc_t_from_path (ipc_t** _ipc, char* _root, char* _sub);
/**
@brief Frees an ipc_t and all allocated data within.
@details Assumes that the ipc_t has been properly created by ipc_t_new() and
set by ipc_t_set() or ipc_t_from_path(). Does nothing if \b _ipc or
\b *_ipc is NULL.
<br>\b *_ipc will automatically be set to NULL by this function.
@param _ipc Refers to the struct to free.
**/
void ipc_t_del (ipc_t** _ipc);
/**
@brief Generate a path string for ipc_t given a directory and file.
@description Ensures the path exists with file_touch().
Allocates space for the path.
@param _root The name of the root directory. If it is NULL, #ipc_root is used.
@param _sub The name of the file.
@beg{Errors}
@ent{_EPTRNULL, \b _sub is NULL.}
@ent{_ESTRNULL, \b _sub begins with a '\0' character.}
@ent{_EALLOC, Unable to allocate memory for the path.}
@end
@note Inherits errors from str_cat_len(), str_cat(), and file_touch().
**/
char* ipc_gen_path (char* _root, char* _sub);
/**
@brief Generates keys with \b ftok()
@param _path The name of the file to generate the key from.
@param _proj_id An agreed upon value used to generate a unique key.
@return Upon success, returns the key.
<br>Upon failure, returns -1, prints errors if necessary, and sets #err_num.
@beg{Errors}
@ent{_EPTRNULL, \b _path was NULL.}
@ent{_ESTREMPTY, \b _path begins with a '\0' character.}
@ent{_ESYSTEM, Error producing the key with \b ftok().}
@end
**/
key_t ipc_gen_key_ftok (char* _path, int _proj_id);
